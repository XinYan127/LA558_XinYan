year = 2020
) %>%
mutate(sex = "Female")
pyramid_data <- bind_rows(male_data, female_data) %>%
mutate(variable = factor(variable, levels = cohort_names)) #<<
View(pyramid_data)
## ----washtenaw-pyramid----------------------------------------------------------------
washtenaw_pyramid <- ggplot(pyramid_data,
aes(x = estimate, y = variable,
fill = sex)) +
geom_col(width = 0.95, alpha = 0.75) +
theme_minimal(base_size = 12) +
scale_x_continuous(labels = function(x) paste0(abs(x / 1000), "k")) +
scale_fill_manual(values = c("#00274C", "#FFCB05")) +
labs(x = "",
y = "ACS estimate",
title = "Population structure in Washtenaw County, Michigan",
fill = "",
caption = "Data source: 2016-2020 ACS & tidycensus R package")
## ----washtenaw-pyramid-show-----------------------------------------------------------
washtenaw_pyramid
## ----get-orleans-income---------------------------------------------------------------
orleans_income <- get_acs(
geography = "tract",
variables = "B19013_001",
state = "LA",
county = "Orleans",
year = 2020,
geometry = TRUE
)
## ----view-orleans-income--------------------------------------------------------------
orleans_income
## ----orleans-income-first-------------------------------------------------------------
ggplot(orleans_income, aes(fill = estimate)) +
geom_sf()
## ----orleans-income-show--------------------------------------------------------------
ggplot(orleans_income, aes(fill = estimate)) +
geom_sf() +
scale_fill_viridis_c(option = "mako") +
theme_void()
## ----orleans-income-show--------------------------------------------------------------
ggplot(orleans_income, aes(fill = estimate)) +
geom_sf() +
scale_fill_viridis_c(option = "mako") +
theme_void()
## ----orleans-erase--------------------------------------------------------------------
library(tigris)
library(sf)
orleans_erase <- get_acs(
geography = "tract",
variables = "B19013_001",
state = "LA",
county = "Orleans",
geometry = TRUE,
year = 2020,
cb = FALSE #<<
) %>%
st_transform(26982) %>% #<<
erase_water(area_threshold = 0.99) #<<
## ----orleans-erase-show---------------------------------------------------------------
ggplot(orleans_erase, aes(fill = estimate)) +
geom_sf() +
scale_fill_viridis_c(option = "mako")
## ----final-map------------------------------------------------------------------------
library(ggspatial)
final_map <- ggplot(orleans_erase, aes(fill = estimate)) +
annotation_map_tile(type = "cartolight", zoom = 11) + #<<
theme_void(base_size = 14) +
geom_sf(alpha = 0.6, lwd = 0.1) +
scale_fill_viridis_c(option = "mako", labels = label_dollar()) +
labs(title = "Median household income, Orleans Parish LA",
subtitle = "2016-2020 ACS estimates",
caption = "Tile source: CARTO / OpenStreetMap contributors",
fill = "ACS estimate  ")
## ----final-map-show-------------------------------------------------------------------
final_map
## ----moe-example----------------------------------------------------------------------
vars <- paste0("B01001_0", c(20:25, 44:49))
salt_lake <- get_acs(
geography = "tract",
variables = vars,
state = "Utah",
county = "Salt Lake",
year = 2019
)
example_tract <- salt_lake %>%
filter(GEOID == "49035100100")
## ----moe-prop-------------------------------------------------------------------------
moe_prop(25, 100, 5, 3)
## ----slc-grouped----------------------------------------------------------------------
salt_lake_grouped <- salt_lake %>%
mutate(sex = case_when(
str_sub(variable, start = -2) < "26" ~ "Male",
TRUE ~ "Female"
)) %>%
group_by(GEOID, sex) %>%
summarize(sum_est = sum(estimate),
sum_moe = moe_sum(moe, estimate))
## ----slc-grouped-show-----------------------------------------------------------------
salt_lake_grouped
## ----nebraska-series------------------------------------------------------------------
years <- c(2010, 2015, 2020)
nebraska_series <- map_dfr(years, function(year) {
get_acs(
geography = "county",
state = "NE",
variables = "DP02_0068P",
year = year
) %>%
mutate(year = year)
}) %>%
arrange(NAME)
## ----nebraska-series-show-------------------------------------------------------------
nebraska_series
## ----cp-tables------------------------------------------------------------------------
ak_income_compare <- get_acs(
geography = "county",
variables = c(
income15 = "CP03_2015_062",
income20 = "CP03_2020_062"
),
state = "AK",
year = 2020
)
## ----cp-tables-show-------------------------------------------------------------------
ak_income_compare
## ----get-wfh-data-------------------------------------------------------
library(sf)
wfh_15 <- get_acs(geography = "tract", variables = "B08006_017", year = 2015,
state = "AZ", county = "Maricopa", geometry = TRUE) %>%
st_transform(26950)
wfh_20 <- get_acs(geography = "tract", variables = "B08006_017", year = 2020,
state = "AZ", county = "Maricopa", geometry = TRUE) %>%
st_transform(26950)
## ----areal-interpolate--------------------------------------------------
library(sf)
wfh_20_to_15 <- wfh_20 %>%
select(estimate) %>%
st_interpolate_aw(to = wfh_15, extensive = TRUE)
## ----map-aw-------------------------------------------------------------
library(mapview)
library(leafsync)
m20a <- mapview(wfh_20, zcol = "estimate", layer.name = "2020 geographies")
m15a <- mapview(wfh_20_to_15, zcol = "estimate", layer.name = "2015 geographies")
sync(m20a, m15a)
## ----pop-interpolate----------------------------------------------------
# source("population_weighted_interpolation.R")
library(tigris)
options(tigris_use_cache = TRUE)
maricopa_blocks <- blocks(
"AZ",
"Maricopa",
year = 2020
)
install.packages("leaflet", "leaflet.providers", "tidyverse", "sf")
library(leaflet)
library(leaflet.providers)
library(tidyverse)
library(readxl)
library(sf)
# Create a Leaflet page in R that includes at least 20 markers. The markers should include a popup or a label, and can be a marker, circle or a circle Marker.
data(quakes)
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
sampledata = sample_n(quakes,100)
leaflet(data = sampledata) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
leaflet(data = sample_n(quakes,50)) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
?data
data()
leaflet(data = sample_n(airquality,50)) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
# Create a Leaflet page in R that includes at least 20 markers. The markers should include a popup or a label, and can be a marker, circle or a circle Marker.
data(airquality)
force(airquality)
data()
data(storms)
force(storms)
# Create a Leaflet page in R that includes at least 20 markers. The markers should include a popup or a label, and can be a marker, circle or a circle Marker.
data(quakes)
leaflet(data = sample_n(quakes,50)) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
leaflet(data = sample_n(quakes,50)) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag)) %>% clusterOptions = markerClusterOptions()
leaflet(data = sample_n(quakes,50)) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag), clusterOptions = markerClusterOptions())
leaflet(data = sample_n(quakes,50)) %>% addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag), clusterOptions = markerClusterOptions())
leaflet(data = sample_n(quakes,50)) %>% addProviderTiles(providers$Esri.NatGeoWorldMap) %>% addProviderTiles(providers$CartoDB.Positron) %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag), clusterOptions = markerClusterOptions())
leaflet(data = sample_n(quakes,50)) %>% addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag), clusterOptions = markerClusterOptions())
# Set working directory to the same as this R file.
# Read in the shapefile
studentCount <- st_read("studentConferenceCounty.shp")
setwd("~/Documents/github/LA558_XinYan/Exercise/8a")
# Set working directory to the same as this R file.
# Read in the shapefile
studentCount <- st_read("studentConferenceCounty.shp")
# Set the projection to use lat and longs
studentCount <- st_transform(studentCount, crs = 4326)
# I should have corrected the name of the count field. It is currently
# last_name_, but I can use dplyr to rename the column!
studentCount <- studentCount %>% rename(count = last_name_)
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = studentCount,  # borders of all counties
color = "blue", fill = NA, weight = 1)
m
# Display only a few counties, Boone and Green for example.
studentCount_selection1 <- studentCount %>%
filter(COUNTY %in% c("Boone", "Greene"))
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = studentCount_selection1,  # borders of all counties
color = "#ffff00", fillColor = "blue", weight = 5, opacity = 0.75)
m
# Yes, that was a poor color selection ...
# Note using help to see the other properties of the addPolygons - notice to
# Change the opacity of the fill you need to use fillOpacity = a value of 0-1
?leaflet::addPolygons
# Or maybe only the counties with no participants? Look for not > than 0 or NA
studentCount_selection2 <- studentCount %>%
filter(is.na(count) | !count > 0)
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = studentCount_selection2,  # borders of all counties
color = "#000", fillColor = "red", weight = 1,
opacity = 0.75, fillOpacity = 0.8)
m
# What if I wanted to show both of the special county selections?
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = studentCount_selection2,  # borders of all counties
color = "#000", fillColor = "red", weight = 1,
opacity = 0.75, fillOpacity = 0.8) %>%
# Add the additional polygon! This woudl work for markers as well!!!
addPolygons(data = studentCount_selection1,  # borders of all counties
color = "blue", fillColor = "white", weight = 5,
opacity = 0.75, fillOpacity = 0.8)
m
# OK, but what I really want is a chloropleth map of the counts
# First I better replace the NA in the entire dataframe with a 0.
studentCount <- studentCount %>%
replace(is.na(.), 0)
# Select the color scheme from Color Brewer
library("RColorBrewer") #I think either Leaflet or tidyverse loads this for you
display.brewer.all()
bins <- c(0, 2, 4, 6, 8, 10, 12, 14, Inf)
pal <- colorBin("PuBu", domain = studentCount$count, bins = bins)
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = studentCount,
fillColor = ~pal(count),
weight = 0.5,
opacity = 1,
color = "grey",
dashArray = "1",
fillOpacity = 0.8)
m
# Add interaction
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = studentCount,
fillColor = ~pal(count),
weight = 0.5,
opacity = 1,
color = "grey",
dashArray = "1",
fillOpacity = 0.8,  #be careful, you need to switch the ) to a comma
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE)
)
m
# With that working we now need to display the county and the count in a popup
# Start with the description of the labels , must do this before
# loading the map reference for sprintf
# is https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/sprintf
labels <- sprintf(
"<strong>%s</strong><br/>%g students",
studentCount$COUNTY, studentCount$count
) %>% lapply(htmltools::HTML)
studentCount <- studentCount %>% rename(count = last_name_)
#Create a Leaflet page in R that includes a chloropleth.
studentCount <- st_read("studentConferenceCounty.shp")
studentCount <- st_transform(studentCount, crs = 4326)
studentCount <- studentCount %>% rename(count = last_name_)
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = studentCount,
color = "blue", fill = NA, weight = 1)
m
display.brewer.all() # I am selecting the Reds
bins <- c(0, 2, 4, 6, 8, 10, 12, 14, Inf)
pal <- colorBin("Pastel2", domain = studentCount$count, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g students",
studentCount$COUNTY, studentCount$count
) %>% lapply(htmltools::HTML)
#make a short list of markers and convert to a data frame
longitude<- c(-92.3, -91.4, -92.7)
latitude <- c(42.1, 42.7, 42.0)
df <- data.frame(longitude, latitude)
# convert to spatial data frame
df_sf = st_as_sf(df, coords = c("longitude", "latitude"), crs = 4326)
#But we would prefer to have
bounds <- df_sf %>%
st_bbox() %>%
as.character()
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addMarkers(data = df_sf) %>%
fitBounds(bounds[1], bounds[2], bounds[3], bounds[4])  %>%
addPolygons(data = studentCount,
fillColor = ~pal(count),
weight = 0.5,
opacity = 1,
color = "grey",
dashArray = "1",
fillOpacity = 0.8,  #be careful, you need to switch the ) to a comma
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "10px",
direction = "auto")) %>% addLegend(pal = pal, values = count, opacity = 0.7, title = "Students", position = "bottomright")
m
#Add the legend as an option - you will see an issue is that it could overlap
#the map when exported and displayed in your html.
m %>% addLegend(pal = pal, values = count, opacity = 0.7, title = "Students",
position = "bottomright")
m <- leaflet() %>%
setView(-94.5, 42.2, 10)  %>%
addTiles() %>%
addPolygons(data = studentCount,
color = "blue", fill = NA, weight = 1)
m
m <- leaflet() %>%
setView(-94.5, 42.2, 5)  %>%
addTiles() %>%
addPolygons(data = studentCount,
color = "blue", fill = NA, weight = 1)
m
m <- leaflet() %>%
setView(-94.5, 42.2, 6)  %>%
addTiles() %>%
addPolygons(data = studentCount,
color = "blue", fill = NA, weight = 1)
m
m <- leaflet() %>%
setView(-94.5, 42.2, 7)  %>%
addTiles() %>%
addPolygons(data = studentCount,
color = "blue", fill = NA, weight = 1)
m
m <- leaflet() %>%
setView(-95.5, 42.2, 7)  %>%
addTiles() %>%
addPolygons(data = studentCount,
color = "blue", fill = NA, weight = 1)
m
m <- leaflet() %>%
setView(-96.5, 42.2, 7)  %>%
addTiles() %>%
addPolygons(data = studentCount,
color = "blue", fill = NA, weight = 1)
m
m <- leaflet() %>%
setView(-93.5, 42.2, 7)  %>%
addTiles() %>%
addPolygons(data = studentCount,
color = "blue", fill = NA, weight = 1)
m
m <- leaflet() %>%
setView(-93.5, 42.2, 7)  %>%
addTiles() %>%
addPolygons(data = studentCount,
color = "pink", fill = NA, weight = 1)
m
m <- leaflet() %>%
setView(-93.5, 42.2, 7)  %>%
addTiles() %>%
addPolygons(data = studentCount,
color = "purple", fill = NA, weight = 1)
m
m <- leaflet() %>%
setView(-93.5, 42.2, 7)  %>%
addTiles() %>%
addPolygons(data = studentCount,
color = "orange", fill = NA, weight = 1)
m
m <- leaflet() %>%
setView(-93.5, 42.2, 7)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = studentCount,
color = "orange", fill = NA, weight = 1)
m
m <- leaflet() %>%
setView(-93.5, 42.2, 7)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = studentCount,
color = "pink", fill = NA, weight = 1)
m
m <- leaflet() %>%
setView(-93.5, 42.2, 7)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = studentCount,
color = "purple", fill = NA, weight = 1)
m
View(studentCount)
bins <- c(0, 2, 4, 6, 8, 10, 12, 14, Inf)
pal <- colorBin("Pastel2", domain = studentCount$count, bins = bins)
labels <- sprintf(
"<strong>%s</strong><br/>%g students",
studentCount$COUNTY, studentCount$count
) %>% lapply(htmltools::HTML)
#make a short list of markers and convert to a data frame
longitude<- c(-92.3, -91.4, -92.7)
m <- leaflet() %>%
setView(-93.5, 42.2, 7)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = studentCount,
fillColor = ~pal(count),
weight = 0.5,
opacity = 1,
color = "grey",
dashArray = "1",
fillOpacity = 0.8,  #be careful, you need to switch the ) to a comma
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "10px",
direction = "auto")) %>% addLegend(pal = pal, values = count, opacity = 0.7, title = "Students", position = "bottomright")
m
m %>% addLegend(pal = pal, values = count, opacity = 0.7, title = "Students",
position = "bottomright")
m <- leaflet() %>%
setView(-93.5, 42.2, 7)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = studentCount,
fillColor = ~pal(count),
weight = 0.5,
opacity = 1,
color = "grey",
dashArray = "1",
fillOpacity = 0.8,  #be careful, you need to switch the ) to a comma
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "10px",
direction = "auto")) %>% addLegend(pal = pal, values = count, opacity = 0.7, title = "Students", position = "bottomright")
m
m <- leaflet() %>%
setView(-93.5, 42.2, 7)  %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(data = studentCount,
fillColor = ~pal(count),
weight = 0.5,
opacity = 1,
color = "purple",
dashArray = "1",
fillOpacity = 0.8,  #be careful, you need to switch the ) to a comma
highlightOptions = highlightOptions(
weight = 2,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "10px",
direction = "auto")) %>% addLegend(pal = pal, values = count, opacity = 0.7, title = "Students", position = "bottomright")
m
library(htmlwidgets)
# however if you want to export multiple maps for a page, then you can put
# the shared resources into a dir named lib. The m.html file then is 1.
saveWidget(m, "m.html", selfcontained = F, libdir = "lib")
setwd("~/Documents/github/LA558_XinYan/Assignment/Assignment4")
# however if you want to export multiple maps for a page, then you can put
# the shared resources into a dir named lib. The m.html file then is 1.
saveWidget(m, "m.html", selfcontained = F, libdir = "lib")
