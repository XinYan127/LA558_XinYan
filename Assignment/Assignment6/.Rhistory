labs(title = "Median household income, 2016-2020 ACS",
subtitle = "Counties in Iowa",
x = "ACS estimate",
y = "",
caption = "Error bars reflect the margin of error around the ACS estimate") + #<<
theme_minimal(base_size = 14) +
scale_x_continuous(labels = dollar_format(scale = 0.001,
suffix = "K"))
View(ia_income_bar)
## ----nj-income------------------------------------------------------------------------
ia_income <- get_acs(
geography = "county",
variables = "B19013_001",
state = "IA",
year = 2020,
moe_level = 99
) %>%
mutate(NAME = str_remove(NAME,
" County, Iowa"))
ia_income
View(ia_income)
## ----nj-income------------------------------------------------------------------------
ia_income <- get_acs(
geography = "county",
variables = "B19013_001",
state = "IA",
year = 2020,
moe_level = 99
)
## ----nj-income------------------------------------------------------------------------
ia_income <- get_acs(
geography = "county",
variables = "B19013_001",
state = "IA",
year = 2020,
moe_level = 99
) %>%
mutate(NAME = str_remove(NAME,
" County, Iowa"))
ia_income
ia_income1 = ia_income %>%
arrange(desc(estimate)) %>%
head(10)
ggplot(ia_income1,
aes(x = estimate,
y = reorder(NAME, estimate))) +
geom_errorbar(aes(xmin = estimate - moe, xmax = estimate + moe), #<<
width = 0.5, size = 0.5) + #<<
geom_point(color = "navy", size = 3) + #<<
labs(title = "Median household income, 2016-2020 ACS",
subtitle = "Counties in Iowa",
x = "ACS estimate",
y = "",
caption = "Error bars reflect the margin of error around the ACS estimate") + #<<
theme_minimal(base_size = 14) +
scale_x_continuous(labels = dollar_format(scale = 0.001,
suffix = "K"))
ggplot(ia_income1,
aes(x = estimate,
y = reorder(NAME, estimate))) +
geom_errorbar(aes(xmin = estimate - moe, xmax = estimate + moe), #<<
width = 0.5, size = 0.5) + #<<
geom_point(color = "navy", size = 3) + #<<
labs(title = "TOP 10 counties in IOWA by Median household income, 2016-2020 ACS",
subtitle = "Counties in Iowa",
x = "ACS estimate",
y = "",
caption = "Error bars reflect the margin of error around the ACS estimate") + #<<
theme_minimal(base_size = 14) +
scale_x_continuous(labels = dollar_format(scale = 0.001,
suffix = "K"))
# ------------ 3. Plot using external data from a csv, xlsx, google sheet or even a Github repository ------------
# Dataset 1: one value per group
data <- read.csv("https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv")
p <- data %>%
ggplot( aes(x=species, y=sepal_length, fill=sepal_width)) +
geom_violin() +
xlab("species") +
theme(legend.position="none") +
xlab("")
p
data %>%
ggplot( aes(x=species, y=sepal_length, fill=sepal_width)) +
geom_violin() +
xlab("species") +
theme(legend.position="roght") +
xlab("")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=sepal_width)) +
geom_violin() +
xlab("species") +
theme(legend.position="roght") +
xlab("")
mpg %>%
ggplot( aes(x=class, y=hwy, fill=class)) +
geom_violin() +
xlab("class") +
theme(legend.position="none") +
xlab("")
mpg %>%
ggplot( aes(x=class, y=hwy, fill=class)) +
geom_violin()
data %>%
ggplot( aes(x=species, y=sepal_length, fill=sepal_width)) +
geom_violin()
mpg
view(mpg)
mpg =mpg
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species)) +
geom_violin() +
xlab("species") +
theme(legend.position="roght") +
xlab("")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species)) +
geom_violin() +
xlab("species") +
xlab("")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species)) +
geom_violin() +
xlab("species")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species)) +
geom_violin() +
xlab("species") +
xlab("")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species)) +
geom_violin() +
xlab("species")
data %>%
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species, alpha = 0.8) )+
geom_violin() +
xlab("species")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species, alpha = 0.8) )+
geom_violin() +
xlab("species")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species) )+
geom_violin(alpha = 0.8) +
xlab("species")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species, alpha = 0.8) )+
geom_violin() +
xlab("species")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species) )+
geom_violin(alpha = 0.8) +
xlab("species")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species) )+
geom_violin(alpha = 0.5) +
xlab("species")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species) )+
geom_violin(alpha = 0.5) +
xlab("species") +
abs(title = "Violin plot")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species) )+
geom_violin(alpha = 0.5) +
xlab("species") +
ggtitle = "Violin plot"
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species) ) +
geom_violin(alpha = 0.5) +
xlab("species")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species) ) +
geom_violin(alpha = 0.5) +
xlab("species")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species) ) +
geom_violin(alpha = 0.5) +
labs(title = "Violin plot",
x = "species",
y = "",
caption = "Error bars reflect the margin of error around the ACS estimate")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species) ) +
geom_violin(alpha = 0.5) +
labs(title = "Violin plot",
x = "species")
## ----nj-income------------------------------------------------------------------------
ia_income <- get_acs(
geography = "county",
variables = "B19013_001",
state = "IA",
year = 2020,
moe_level = 99
) %>%
mutate(NAME = str_remove(NAME,
" County, Iowa"))
ia_income1 = ia_income %>%
arrange(desc(estimate)) %>%
head(10)
ggplot(ia_income1,
aes(x = estimate,
y = reorder(NAME, estimate))) +
geom_errorbar(aes(xmin = estimate - moe, xmax = estimate + moe), #<<
width = 0.5, size = 0.5) + #<<
geom_point(color = "navy", size = 3) + #<<
labs(title = "TOP 10 counties in IOWA by Median household income, 2016-2020 ACS",
subtitle = "Counties in Iowa",
x = "ACS estimate",
y = "",
caption = "Error bars reflect the margin of error around the ACS estimate") + #<<
theme_minimal(base_size = 14) +
scale_x_continuous(labels = dollar_format(scale = 0.001,
suffix = "K"))
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species) ) +
geom_violin(alpha = 0.5) +
labs(title = "Violin plot",
x = "species")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species) ) +
scale_fill_manual(values=c("#0000FF", "#00FF00", "#FF0000")) +
geom_violin(alpha = 0.5) +
labs(title = "Violin plot",
x = "species")
data %>%
ggplot( aes(x=species, y=sepal_length, fill=species) ) +
scale_fill_manual(values=c("#0000FF", "#00FF00", "#FF0000")) +
geom_violin(alpha = 0.3) +
labs(title = "Violin plot",
x = "species")
## ----nj-income------------------------------------------------------------------------
nj_income <- get_acs(
geography = "county",
variables = "B19013_001",
state = "NJ",
year = 2020,
moe_level = 99
) %>%
mutate(NAME = str_remove(NAME,
" County, New Jersey"))
View(nj_income)
## ----median-home-value----------------------------------------------------------------
median_home_value <- get_acs(
geography = "county",
variables = "B25077_001",
year = 2020
)
top10percent <- median_home_value %>%
mutate(percentile = percent_rank(estimate)) %>% #<<
filter(percentile >= 0.9) #<<
## ----show-top-10-percent--------------------------------------------------------------
top10percent
## ----separate-------------------------------------------------------------------------
top10percent <- top10percent %>%
separate( #<<
NAME, #<<
into = c("county", "state"), #<<
sep = ", " #<<
) #<<
## ----show-separated-------------------------------------------------------------------
top10percent
## ----state-summary--------------------------------------------------------------------
state_summary <- top10percent %>%
group_by(state) %>% #<<
summarize(n = n()) %>% #<<
arrange(desc(n)) #<<
## ----state-summary-show---------------------------------------------------------------
state_summary
View(state_summary)
View(top10percent)
View(top10percent)
state_summary2 <- top10percent %>%
group_by(state) %>% #<<
summarize(n1 = median(estimate)) %>% #<<
arrange(desc(n1)) #<<
View(state_summary2)
## ----histogram------------------------------------------------------------------------
library(tidyverse)
library(scales)
acs_vars <- load_variables(2020, "acs5")
View(acs_vars)
## ----nj-income------------------------------------------------------------------------
nj_income <- get_acs(
geography = "county",
variables = "B19013_001",
state = "NJ",
year = 2020,
moe_level = 99
) %>%
mutate(NAME = str_remove(NAME,
" County, New Jersey"))
## ----nj-income-bar--------------------------------------------------------------------
nj_income_bar <- ggplot(nj_income,
aes(x = estimate,
y = reorder(NAME, estimate))) +
geom_col() +
labs(title = "Median household income, 2016-2020 ACS",
subtitle = "Counties in New Jersey",
x = "ACS estimate",
y = "") +
theme_minimal(base_size = 14) +
scale_x_continuous(labels = dollar_format(scale = 0.001,
suffix = "K"))
## ----nj-income-bar-show---------------------------------------------------------------
nj_income_bar
??theme_minimal
## ----load-subject---------------------------------------------------------------------
subject <- load_variables(2020, "acs5/subject")
View(subject)
## ----prepare-data-request-------------------------------------------------------------
cohort_names <- c("0-4", "5-9", "10-14", "15-19",
"20-24", "25-29", "30-34", "35-39",
"40-44", "45-49", "50-54", "55-59",
"60-64", "65-69", "70-74", "75-79",
"80-84", "85+")
male_vars <- 2:19 %>%
str_pad(2, "left", "0") %>%
paste0("S0101_C03_0", .) %>%
set_names(cohort_names)
female_vars <- 2:19 %>%
str_pad(2, "left", "0") %>%
paste0("S0101_C05_0", .) %>%
set_names(cohort_names)
## ----get-pyramid-data-----------------------------------------------------------------
male_data <- get_acs(
geography = "county",
variables = male_vars,
state = "MI",
county = "Washtenaw",
year = 2020
) %>%
mutate(sex = "Male",
estimate = estimate * -1)
female_data <- get_acs(
geography = "county",
variables = female_vars,
state = "MI",
county = "Washtenaw",
year = 2020
) %>%
mutate(sex = "Female")
pyramid_data <- bind_rows(male_data, female_data) %>%
mutate(variable = factor(variable, levels = cohort_names)) #<<
View(pyramid_data)
## ----washtenaw-pyramid----------------------------------------------------------------
washtenaw_pyramid <- ggplot(pyramid_data,
aes(x = estimate, y = variable,
fill = sex)) +
geom_col(width = 0.95, alpha = 0.75) +
theme_minimal(base_size = 12) +
scale_x_continuous(labels = function(x) paste0(abs(x / 1000), "k")) +
scale_fill_manual(values = c("#00274C", "#FFCB05")) +
labs(x = "",
y = "ACS estimate",
title = "Population structure in Washtenaw County, Michigan",
fill = "",
caption = "Data source: 2016-2020 ACS & tidycensus R package")
## ----washtenaw-pyramid-show-----------------------------------------------------------
washtenaw_pyramid
## ----get-orleans-income---------------------------------------------------------------
orleans_income <- get_acs(
geography = "tract",
variables = "B19013_001",
state = "LA",
county = "Orleans",
year = 2020,
geometry = TRUE
)
## ----view-orleans-income--------------------------------------------------------------
orleans_income
## ----orleans-income-first-------------------------------------------------------------
ggplot(orleans_income, aes(fill = estimate)) +
geom_sf()
## ----orleans-income-show--------------------------------------------------------------
ggplot(orleans_income, aes(fill = estimate)) +
geom_sf() +
scale_fill_viridis_c(option = "mako") +
theme_void()
## ----orleans-income-show--------------------------------------------------------------
ggplot(orleans_income, aes(fill = estimate)) +
geom_sf() +
scale_fill_viridis_c(option = "mako") +
theme_void()
## ----orleans-erase--------------------------------------------------------------------
library(tigris)
library(sf)
orleans_erase <- get_acs(
geography = "tract",
variables = "B19013_001",
state = "LA",
county = "Orleans",
geometry = TRUE,
year = 2020,
cb = FALSE #<<
) %>%
st_transform(26982) %>% #<<
erase_water(area_threshold = 0.99) #<<
## ----orleans-erase-show---------------------------------------------------------------
ggplot(orleans_erase, aes(fill = estimate)) +
geom_sf() +
scale_fill_viridis_c(option = "mako")
## ----final-map------------------------------------------------------------------------
library(ggspatial)
final_map <- ggplot(orleans_erase, aes(fill = estimate)) +
annotation_map_tile(type = "cartolight", zoom = 11) + #<<
theme_void(base_size = 14) +
geom_sf(alpha = 0.6, lwd = 0.1) +
scale_fill_viridis_c(option = "mako", labels = label_dollar()) +
labs(title = "Median household income, Orleans Parish LA",
subtitle = "2016-2020 ACS estimates",
caption = "Tile source: CARTO / OpenStreetMap contributors",
fill = "ACS estimate  ")
## ----final-map-show-------------------------------------------------------------------
final_map
## ----moe-example----------------------------------------------------------------------
vars <- paste0("B01001_0", c(20:25, 44:49))
salt_lake <- get_acs(
geography = "tract",
variables = vars,
state = "Utah",
county = "Salt Lake",
year = 2019
)
example_tract <- salt_lake %>%
filter(GEOID == "49035100100")
## ----moe-prop-------------------------------------------------------------------------
moe_prop(25, 100, 5, 3)
## ----slc-grouped----------------------------------------------------------------------
salt_lake_grouped <- salt_lake %>%
mutate(sex = case_when(
str_sub(variable, start = -2) < "26" ~ "Male",
TRUE ~ "Female"
)) %>%
group_by(GEOID, sex) %>%
summarize(sum_est = sum(estimate),
sum_moe = moe_sum(moe, estimate))
## ----slc-grouped-show-----------------------------------------------------------------
salt_lake_grouped
## ----nebraska-series------------------------------------------------------------------
years <- c(2010, 2015, 2020)
nebraska_series <- map_dfr(years, function(year) {
get_acs(
geography = "county",
state = "NE",
variables = "DP02_0068P",
year = year
) %>%
mutate(year = year)
}) %>%
arrange(NAME)
## ----nebraska-series-show-------------------------------------------------------------
nebraska_series
## ----cp-tables------------------------------------------------------------------------
ak_income_compare <- get_acs(
geography = "county",
variables = c(
income15 = "CP03_2015_062",
income20 = "CP03_2020_062"
),
state = "AK",
year = 2020
)
## ----cp-tables-show-------------------------------------------------------------------
ak_income_compare
## ----get-wfh-data-------------------------------------------------------
library(sf)
wfh_15 <- get_acs(geography = "tract", variables = "B08006_017", year = 2015,
state = "AZ", county = "Maricopa", geometry = TRUE) %>%
st_transform(26950)
wfh_20 <- get_acs(geography = "tract", variables = "B08006_017", year = 2020,
state = "AZ", county = "Maricopa", geometry = TRUE) %>%
st_transform(26950)
## ----areal-interpolate--------------------------------------------------
library(sf)
wfh_20_to_15 <- wfh_20 %>%
select(estimate) %>%
st_interpolate_aw(to = wfh_15, extensive = TRUE)
## ----map-aw-------------------------------------------------------------
library(mapview)
library(leafsync)
m20a <- mapview(wfh_20, zcol = "estimate", layer.name = "2020 geographies")
m15a <- mapview(wfh_20_to_15, zcol = "estimate", layer.name = "2015 geographies")
sync(m20a, m15a)
## ----pop-interpolate----------------------------------------------------
# source("population_weighted_interpolation.R")
library(tigris)
options(tigris_use_cache = TRUE)
maricopa_blocks <- blocks(
"AZ",
"Maricopa",
year = 2020
)
library(usmap)
library(ggplot2)
plot_usmap(data = statepop, values = "pop_2015", color = "red") +
scale_fill_continuous(
low = "white", high = "red", name = "Population (2015)", label = scales::comma
) + theme(legend.position = "right")
statepopdata = statepop
library(sf)
setwd("~/Documents/github/LA558_XinYan/Assignment/Assignment6")
st_write(statepopdata, './statepop.shp')
writeOGR(statepopdata, ".", "statepop",
driver = "ESRI Shapefile")
library(rgdal)
library(dplyr)
writeOGR(statepopdata, ".", "statepop",
driver = "ESRI Shapefile")
st_write(statepopdata, "statepopdata.shp")
state_map <- us_map(regions = "states")
View(state_map)
